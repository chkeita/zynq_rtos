/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const TX_MAX_PRIORITIES: u32 = 32;
pub const TX_MINIMUM_STACK: u32 = 200;
pub const TX_TIMER_THREAD_STACK_SIZE: u32 = 1024;
pub const TX_TIMER_THREAD_PRIORITY: u32 = 0;
pub const TX_INT_DISABLE: u32 = 128;
pub const TX_INT_ENABLE: u32 = 0;
pub const TX_TRACE_TIME_MASK: u32 = 4294967295;
pub const TX_FIQ_ENABLED: u32 = 0;
pub const TX_IRQ_NESTING_ENABLED: u32 = 0;
pub const TX_FIQ_NESTING_ENABLED: u32 = 0;
pub const TX_PORT_SPECIFIC_BUILD_OPTIONS: u32 = 0;
pub const THREADX_MAJOR_VERSION: u32 = 6;
pub const THREADX_MINOR_VERSION: u32 = 1;
pub const THREADX_PATCH_VERSION: u32 = 12;
pub const TX_TIMER_TICKS_PER_SECOND: u32 = 100;
pub const TX_TRACE_USER_EVENT_START: u32 = 4096;
pub const TX_TRACE_USER_EVENT_END: u32 = 65535;
pub const TX_TRACE_ALL_EVENTS: u32 = 2047;
pub const TX_TRACE_INTERNAL_EVENTS: u32 = 1;
pub const TX_TRACE_BLOCK_POOL_EVENTS: u32 = 2;
pub const TX_TRACE_BYTE_POOL_EVENTS: u32 = 4;
pub const TX_TRACE_EVENT_FLAGS_EVENTS: u32 = 8;
pub const TX_TRACE_INTERRUPT_CONTROL_EVENT: u32 = 16;
pub const TX_TRACE_MUTEX_EVENTS: u32 = 32;
pub const TX_TRACE_QUEUE_EVENTS: u32 = 64;
pub const TX_TRACE_SEMAPHORE_EVENTS: u32 = 128;
pub const TX_TRACE_THREAD_EVENTS: u32 = 256;
pub const TX_TRACE_TIME_EVENTS: u32 = 512;
pub const TX_TRACE_TIMER_EVENTS: u32 = 1024;
pub const TX_TRACE_USER_EVENTS: u32 = 2147483648;
pub const MAP_INDEX: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    fn test_field_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDOUBLE),
                "::",
                stringify!(ld)
            )
        );
    }
    test_field_ld();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_DOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_DOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_FLOAT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_FLOAT),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LONGDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LONGDOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    fn test_field_ld12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDBL12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDBL12),
                "::",
                stringify!(ld12)
            )
        );
    }
    test_field_ld12();
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: size_t,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type CHAR = ::std::os::raw::c_char;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type SHORT = ::std::os::raw::c_short;
pub type USHORT = ::std::os::raw::c_ushort;
extern "C" {
    pub fn tx_thread_vfp_enable();
}
extern "C" {
    pub fn tx_thread_vfp_disable();
}
extern "C" {
    pub static mut _tx_version_id: [CHAR; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_TIMER_INTERNAL_STRUCT {
    pub tx_timer_internal_remaining_ticks: ULONG,
    pub tx_timer_internal_re_initialize_ticks: ULONG,
    pub tx_timer_internal_timeout_function: ::std::option::Option<unsafe extern "C" fn(id: ULONG)>,
    pub tx_timer_internal_timeout_param: ULONG,
    pub tx_timer_internal_active_next: *mut TX_TIMER_INTERNAL_STRUCT,
    pub tx_timer_internal_active_previous: *mut TX_TIMER_INTERNAL_STRUCT,
    pub tx_timer_internal_list_head: *mut *mut TX_TIMER_INTERNAL_STRUCT,
}
#[test]
fn bindgen_test_layout_TX_TIMER_INTERNAL_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_TIMER_INTERNAL_STRUCT>(),
        48usize,
        concat!("Size of: ", stringify!(TX_TIMER_INTERNAL_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_TIMER_INTERNAL_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_TIMER_INTERNAL_STRUCT))
    );
    fn test_field_tx_timer_internal_remaining_ticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_remaining_ticks) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_remaining_ticks)
            )
        );
    }
    test_field_tx_timer_internal_remaining_ticks();
    fn test_field_tx_timer_internal_re_initialize_ticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_re_initialize_ticks) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_re_initialize_ticks)
            )
        );
    }
    test_field_tx_timer_internal_re_initialize_ticks();
    fn test_field_tx_timer_internal_timeout_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_timeout_function) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_timeout_function)
            )
        );
    }
    test_field_tx_timer_internal_timeout_function();
    fn test_field_tx_timer_internal_timeout_param() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_timeout_param) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_timeout_param)
            )
        );
    }
    test_field_tx_timer_internal_timeout_param();
    fn test_field_tx_timer_internal_active_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_active_next) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_active_next)
            )
        );
    }
    test_field_tx_timer_internal_active_next();
    fn test_field_tx_timer_internal_active_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_active_previous) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_active_previous)
            )
        );
    }
    test_field_tx_timer_internal_active_previous();
    fn test_field_tx_timer_internal_list_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_INTERNAL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal_list_head) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_INTERNAL_STRUCT),
                "::",
                stringify!(tx_timer_internal_list_head)
            )
        );
    }
    test_field_tx_timer_internal_list_head();
}
pub type TX_TIMER_INTERNAL = TX_TIMER_INTERNAL_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_TIMER_STRUCT {
    pub tx_timer_id: ULONG,
    pub tx_timer_name: *mut CHAR,
    pub tx_timer_internal: TX_TIMER_INTERNAL,
    pub tx_timer_created_next: *mut TX_TIMER_STRUCT,
    pub tx_timer_created_previous: *mut TX_TIMER_STRUCT,
}
#[test]
fn bindgen_test_layout_TX_TIMER_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_TIMER_STRUCT>(),
        80usize,
        concat!("Size of: ", stringify!(TX_TIMER_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_TIMER_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_TIMER_STRUCT))
    );
    fn test_field_tx_timer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_STRUCT),
                "::",
                stringify!(tx_timer_id)
            )
        );
    }
    test_field_tx_timer_id();
    fn test_field_tx_timer_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_STRUCT),
                "::",
                stringify!(tx_timer_name)
            )
        );
    }
    test_field_tx_timer_name();
    fn test_field_tx_timer_internal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_internal) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_STRUCT),
                "::",
                stringify!(tx_timer_internal)
            )
        );
    }
    test_field_tx_timer_internal();
    fn test_field_tx_timer_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_created_next) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_STRUCT),
                "::",
                stringify!(tx_timer_created_next)
            )
        );
    }
    test_field_tx_timer_created_next();
    fn test_field_tx_timer_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_TIMER_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_timer_created_previous) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_TIMER_STRUCT),
                "::",
                stringify!(tx_timer_created_previous)
            )
        );
    }
    test_field_tx_timer_created_previous();
}
pub type TX_TIMER = TX_TIMER_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_THREAD_STRUCT {
    pub tx_thread_id: ULONG,
    pub tx_thread_run_count: ULONG,
    pub tx_thread_stack_ptr: *mut ::std::os::raw::c_void,
    pub tx_thread_stack_start: *mut ::std::os::raw::c_void,
    pub tx_thread_stack_end: *mut ::std::os::raw::c_void,
    pub tx_thread_stack_size: ULONG,
    pub tx_thread_time_slice: ULONG,
    pub tx_thread_new_time_slice: ULONG,
    pub tx_thread_ready_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_ready_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_name: *mut CHAR,
    pub tx_thread_priority: UINT,
    pub tx_thread_state: UINT,
    pub tx_thread_delayed_suspend: UINT,
    pub tx_thread_suspending: UINT,
    pub tx_thread_preempt_threshold: UINT,
    pub tx_thread_schedule_hook:
        ::std::option::Option<unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, id: ULONG)>,
    pub tx_thread_entry: ::std::option::Option<unsafe extern "C" fn(id: ULONG)>,
    pub tx_thread_entry_parameter: ULONG,
    pub tx_thread_timer: TX_TIMER_INTERNAL,
    pub tx_thread_suspend_cleanup: ::std::option::Option<
        unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, suspension_sequence: ULONG),
    >,
    pub tx_thread_suspend_control_block: *mut ::std::os::raw::c_void,
    pub tx_thread_suspended_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_suspended_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_suspend_info: ULONG,
    pub tx_thread_additional_suspend_info: *mut ::std::os::raw::c_void,
    pub tx_thread_suspend_option: UINT,
    pub tx_thread_suspend_status: UINT,
    pub tx_thread_created_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_created_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_vfp_enable: ULONG,
    pub tx_thread_filex_ptr: *mut ::std::os::raw::c_void,
    pub tx_thread_user_priority: UINT,
    pub tx_thread_user_preempt_threshold: UINT,
    pub tx_thread_inherit_priority: UINT,
    pub tx_thread_owned_mutex_count: UINT,
    pub tx_thread_owned_mutex_list: *mut TX_MUTEX_STRUCT,
    pub tx_thread_stack_highest_ptr: *mut ::std::os::raw::c_void,
    pub tx_thread_entry_exit_notify:
        ::std::option::Option<unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, type_: UINT)>,
    pub tx_thread_suspension_sequence: ULONG,
}
#[test]
fn bindgen_test_layout_TX_THREAD_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_THREAD_STRUCT>(),
        304usize,
        concat!("Size of: ", stringify!(TX_THREAD_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_THREAD_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_THREAD_STRUCT))
    );
    fn test_field_tx_thread_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_id)
            )
        );
    }
    test_field_tx_thread_id();
    fn test_field_tx_thread_run_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_run_count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_run_count)
            )
        );
    }
    test_field_tx_thread_run_count();
    fn test_field_tx_thread_stack_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_stack_ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_stack_ptr)
            )
        );
    }
    test_field_tx_thread_stack_ptr();
    fn test_field_tx_thread_stack_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_stack_start) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_stack_start)
            )
        );
    }
    test_field_tx_thread_stack_start();
    fn test_field_tx_thread_stack_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_stack_end) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_stack_end)
            )
        );
    }
    test_field_tx_thread_stack_end();
    fn test_field_tx_thread_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_stack_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_stack_size)
            )
        );
    }
    test_field_tx_thread_stack_size();
    fn test_field_tx_thread_time_slice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_time_slice) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_time_slice)
            )
        );
    }
    test_field_tx_thread_time_slice();
    fn test_field_tx_thread_new_time_slice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_new_time_slice) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_new_time_slice)
            )
        );
    }
    test_field_tx_thread_new_time_slice();
    fn test_field_tx_thread_ready_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_ready_next) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_ready_next)
            )
        );
    }
    test_field_tx_thread_ready_next();
    fn test_field_tx_thread_ready_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_ready_previous) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_ready_previous)
            )
        );
    }
    test_field_tx_thread_ready_previous();
    fn test_field_tx_thread_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_name) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_name)
            )
        );
    }
    test_field_tx_thread_name();
    fn test_field_tx_thread_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_priority) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_priority)
            )
        );
    }
    test_field_tx_thread_priority();
    fn test_field_tx_thread_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_state) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_state)
            )
        );
    }
    test_field_tx_thread_state();
    fn test_field_tx_thread_delayed_suspend() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_delayed_suspend) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_delayed_suspend)
            )
        );
    }
    test_field_tx_thread_delayed_suspend();
    fn test_field_tx_thread_suspending() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspending) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspending)
            )
        );
    }
    test_field_tx_thread_suspending();
    fn test_field_tx_thread_preempt_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_preempt_threshold) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_preempt_threshold)
            )
        );
    }
    test_field_tx_thread_preempt_threshold();
    fn test_field_tx_thread_schedule_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_schedule_hook) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_schedule_hook)
            )
        );
    }
    test_field_tx_thread_schedule_hook();
    fn test_field_tx_thread_entry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_entry) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_entry)
            )
        );
    }
    test_field_tx_thread_entry();
    fn test_field_tx_thread_entry_parameter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_entry_parameter) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_entry_parameter)
            )
        );
    }
    test_field_tx_thread_entry_parameter();
    fn test_field_tx_thread_timer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_timer) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_timer)
            )
        );
    }
    test_field_tx_thread_timer();
    fn test_field_tx_thread_suspend_cleanup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspend_cleanup) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspend_cleanup)
            )
        );
    }
    test_field_tx_thread_suspend_cleanup();
    fn test_field_tx_thread_suspend_control_block() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspend_control_block) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspend_control_block)
            )
        );
    }
    test_field_tx_thread_suspend_control_block();
    fn test_field_tx_thread_suspended_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspended_next) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspended_next)
            )
        );
    }
    test_field_tx_thread_suspended_next();
    fn test_field_tx_thread_suspended_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspended_previous) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspended_previous)
            )
        );
    }
    test_field_tx_thread_suspended_previous();
    fn test_field_tx_thread_suspend_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspend_info) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspend_info)
            )
        );
    }
    test_field_tx_thread_suspend_info();
    fn test_field_tx_thread_additional_suspend_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_additional_suspend_info) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_additional_suspend_info)
            )
        );
    }
    test_field_tx_thread_additional_suspend_info();
    fn test_field_tx_thread_suspend_option() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspend_option) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspend_option)
            )
        );
    }
    test_field_tx_thread_suspend_option();
    fn test_field_tx_thread_suspend_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspend_status) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspend_status)
            )
        );
    }
    test_field_tx_thread_suspend_status();
    fn test_field_tx_thread_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_created_next) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_created_next)
            )
        );
    }
    test_field_tx_thread_created_next();
    fn test_field_tx_thread_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_created_previous) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_created_previous)
            )
        );
    }
    test_field_tx_thread_created_previous();
    fn test_field_tx_thread_vfp_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_vfp_enable) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_vfp_enable)
            )
        );
    }
    test_field_tx_thread_vfp_enable();
    fn test_field_tx_thread_filex_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_filex_ptr) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_filex_ptr)
            )
        );
    }
    test_field_tx_thread_filex_ptr();
    fn test_field_tx_thread_user_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_user_priority) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_user_priority)
            )
        );
    }
    test_field_tx_thread_user_priority();
    fn test_field_tx_thread_user_preempt_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_user_preempt_threshold) as usize
                    - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_user_preempt_threshold)
            )
        );
    }
    test_field_tx_thread_user_preempt_threshold();
    fn test_field_tx_thread_inherit_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_inherit_priority) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_inherit_priority)
            )
        );
    }
    test_field_tx_thread_inherit_priority();
    fn test_field_tx_thread_owned_mutex_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_owned_mutex_count) as usize - ptr as usize
            },
            268usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_owned_mutex_count)
            )
        );
    }
    test_field_tx_thread_owned_mutex_count();
    fn test_field_tx_thread_owned_mutex_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_owned_mutex_list) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_owned_mutex_list)
            )
        );
    }
    test_field_tx_thread_owned_mutex_list();
    fn test_field_tx_thread_stack_highest_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_stack_highest_ptr) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_stack_highest_ptr)
            )
        );
    }
    test_field_tx_thread_stack_highest_ptr();
    fn test_field_tx_thread_entry_exit_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_entry_exit_notify) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_entry_exit_notify)
            )
        );
    }
    test_field_tx_thread_entry_exit_notify();
    fn test_field_tx_thread_suspension_sequence() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_THREAD_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thread_suspension_sequence) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_THREAD_STRUCT),
                "::",
                stringify!(tx_thread_suspension_sequence)
            )
        );
    }
    test_field_tx_thread_suspension_sequence();
}
pub type TX_THREAD = TX_THREAD_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_BLOCK_POOL_STRUCT {
    pub tx_block_pool_id: ULONG,
    pub tx_block_pool_name: *mut CHAR,
    pub tx_block_pool_available: UINT,
    pub tx_block_pool_total: UINT,
    pub tx_block_pool_available_list: *mut UCHAR,
    pub tx_block_pool_start: *mut UCHAR,
    pub tx_block_pool_size: ULONG,
    pub tx_block_pool_block_size: UINT,
    pub tx_block_pool_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_block_pool_suspended_count: UINT,
    pub tx_block_pool_created_next: *mut TX_BLOCK_POOL_STRUCT,
    pub tx_block_pool_created_previous: *mut TX_BLOCK_POOL_STRUCT,
}
#[test]
fn bindgen_test_layout_TX_BLOCK_POOL_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_BLOCK_POOL_STRUCT>(),
        80usize,
        concat!("Size of: ", stringify!(TX_BLOCK_POOL_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_BLOCK_POOL_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_BLOCK_POOL_STRUCT))
    );
    fn test_field_tx_block_pool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_id)
            )
        );
    }
    test_field_tx_block_pool_id();
    fn test_field_tx_block_pool_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_name)
            )
        );
    }
    test_field_tx_block_pool_name();
    fn test_field_tx_block_pool_available() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_available) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_available)
            )
        );
    }
    test_field_tx_block_pool_available();
    fn test_field_tx_block_pool_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_total) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_total)
            )
        );
    }
    test_field_tx_block_pool_total();
    fn test_field_tx_block_pool_available_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_available_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_available_list)
            )
        );
    }
    test_field_tx_block_pool_available_list();
    fn test_field_tx_block_pool_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_start) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_start)
            )
        );
    }
    test_field_tx_block_pool_start();
    fn test_field_tx_block_pool_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_size)
            )
        );
    }
    test_field_tx_block_pool_size();
    fn test_field_tx_block_pool_block_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_block_size) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_block_size)
            )
        );
    }
    test_field_tx_block_pool_block_size();
    fn test_field_tx_block_pool_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_suspension_list) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_suspension_list)
            )
        );
    }
    test_field_tx_block_pool_suspension_list();
    fn test_field_tx_block_pool_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_suspended_count) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_suspended_count)
            )
        );
    }
    test_field_tx_block_pool_suspended_count();
    fn test_field_tx_block_pool_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_created_next) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_created_next)
            )
        );
    }
    test_field_tx_block_pool_created_next();
    fn test_field_tx_block_pool_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BLOCK_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_block_pool_created_previous) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BLOCK_POOL_STRUCT),
                "::",
                stringify!(tx_block_pool_created_previous)
            )
        );
    }
    test_field_tx_block_pool_created_previous();
}
pub type TX_BLOCK_POOL = TX_BLOCK_POOL_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_BYTE_POOL_STRUCT {
    pub tx_byte_pool_id: ULONG,
    pub tx_byte_pool_name: *mut CHAR,
    pub tx_byte_pool_available: ULONG,
    pub tx_byte_pool_fragments: UINT,
    pub tx_byte_pool_list: *mut UCHAR,
    pub tx_byte_pool_search: *mut UCHAR,
    pub tx_byte_pool_start: *mut UCHAR,
    pub tx_byte_pool_size: ULONG,
    pub tx_byte_pool_owner: *mut TX_THREAD_STRUCT,
    pub tx_byte_pool_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_byte_pool_suspended_count: UINT,
    pub tx_byte_pool_created_next: *mut TX_BYTE_POOL_STRUCT,
    pub tx_byte_pool_created_previous: *mut TX_BYTE_POOL_STRUCT,
}
#[test]
fn bindgen_test_layout_TX_BYTE_POOL_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_BYTE_POOL_STRUCT>(),
        96usize,
        concat!("Size of: ", stringify!(TX_BYTE_POOL_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_BYTE_POOL_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_BYTE_POOL_STRUCT))
    );
    fn test_field_tx_byte_pool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_id)
            )
        );
    }
    test_field_tx_byte_pool_id();
    fn test_field_tx_byte_pool_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_name)
            )
        );
    }
    test_field_tx_byte_pool_name();
    fn test_field_tx_byte_pool_available() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_available) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_available)
            )
        );
    }
    test_field_tx_byte_pool_available();
    fn test_field_tx_byte_pool_fragments() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_fragments) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_fragments)
            )
        );
    }
    test_field_tx_byte_pool_fragments();
    fn test_field_tx_byte_pool_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_list)
            )
        );
    }
    test_field_tx_byte_pool_list();
    fn test_field_tx_byte_pool_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_search) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_search)
            )
        );
    }
    test_field_tx_byte_pool_search();
    fn test_field_tx_byte_pool_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_start) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_start)
            )
        );
    }
    test_field_tx_byte_pool_start();
    fn test_field_tx_byte_pool_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_size) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_size)
            )
        );
    }
    test_field_tx_byte_pool_size();
    fn test_field_tx_byte_pool_owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_owner) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_owner)
            )
        );
    }
    test_field_tx_byte_pool_owner();
    fn test_field_tx_byte_pool_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_suspension_list) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_suspension_list)
            )
        );
    }
    test_field_tx_byte_pool_suspension_list();
    fn test_field_tx_byte_pool_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_suspended_count) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_suspended_count)
            )
        );
    }
    test_field_tx_byte_pool_suspended_count();
    fn test_field_tx_byte_pool_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_created_next) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_created_next)
            )
        );
    }
    test_field_tx_byte_pool_created_next();
    fn test_field_tx_byte_pool_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_BYTE_POOL_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_byte_pool_created_previous) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_BYTE_POOL_STRUCT),
                "::",
                stringify!(tx_byte_pool_created_previous)
            )
        );
    }
    test_field_tx_byte_pool_created_previous();
}
pub type TX_BYTE_POOL = TX_BYTE_POOL_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_EVENT_FLAGS_GROUP_STRUCT {
    pub tx_event_flags_group_id: ULONG,
    pub tx_event_flags_group_name: *mut CHAR,
    pub tx_event_flags_group_current: ULONG,
    pub tx_event_flags_group_reset_search: UINT,
    pub tx_event_flags_group_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_event_flags_group_suspended_count: UINT,
    pub tx_event_flags_group_created_next: *mut TX_EVENT_FLAGS_GROUP_STRUCT,
    pub tx_event_flags_group_created_previous: *mut TX_EVENT_FLAGS_GROUP_STRUCT,
    pub tx_event_flags_group_delayed_clear: ULONG,
    pub tx_event_flags_group_set_notify:
        ::std::option::Option<unsafe extern "C" fn(group_ptr: *mut TX_EVENT_FLAGS_GROUP_STRUCT)>,
}
#[test]
fn bindgen_test_layout_TX_EVENT_FLAGS_GROUP_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_EVENT_FLAGS_GROUP_STRUCT>(),
        72usize,
        concat!("Size of: ", stringify!(TX_EVENT_FLAGS_GROUP_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_EVENT_FLAGS_GROUP_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_EVENT_FLAGS_GROUP_STRUCT))
    );
    fn test_field_tx_event_flags_group_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_id)
            )
        );
    }
    test_field_tx_event_flags_group_id();
    fn test_field_tx_event_flags_group_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_name)
            )
        );
    }
    test_field_tx_event_flags_group_name();
    fn test_field_tx_event_flags_group_current() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_current) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_current)
            )
        );
    }
    test_field_tx_event_flags_group_current();
    fn test_field_tx_event_flags_group_reset_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_reset_search) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_reset_search)
            )
        );
    }
    test_field_tx_event_flags_group_reset_search();
    fn test_field_tx_event_flags_group_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_suspension_list) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_suspension_list)
            )
        );
    }
    test_field_tx_event_flags_group_suspension_list();
    fn test_field_tx_event_flags_group_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_suspended_count) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_suspended_count)
            )
        );
    }
    test_field_tx_event_flags_group_suspended_count();
    fn test_field_tx_event_flags_group_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_created_next) as usize
                    - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_created_next)
            )
        );
    }
    test_field_tx_event_flags_group_created_next();
    fn test_field_tx_event_flags_group_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_created_previous) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_created_previous)
            )
        );
    }
    test_field_tx_event_flags_group_created_previous();
    fn test_field_tx_event_flags_group_delayed_clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_delayed_clear) as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_delayed_clear)
            )
        );
    }
    test_field_tx_event_flags_group_delayed_clear();
    fn test_field_tx_event_flags_group_set_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_EVENT_FLAGS_GROUP_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_event_flags_group_set_notify) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_EVENT_FLAGS_GROUP_STRUCT),
                "::",
                stringify!(tx_event_flags_group_set_notify)
            )
        );
    }
    test_field_tx_event_flags_group_set_notify();
}
pub type TX_EVENT_FLAGS_GROUP = TX_EVENT_FLAGS_GROUP_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_MUTEX_STRUCT {
    pub tx_mutex_id: ULONG,
    pub tx_mutex_name: *mut CHAR,
    pub tx_mutex_ownership_count: UINT,
    pub tx_mutex_owner: *mut TX_THREAD,
    pub tx_mutex_inherit: UINT,
    pub tx_mutex_original_priority: UINT,
    pub tx_mutex_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_mutex_suspended_count: UINT,
    pub tx_mutex_created_next: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_created_previous: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_highest_priority_waiting: UINT,
    pub tx_mutex_owned_next: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_owned_previous: *mut TX_MUTEX_STRUCT,
}
#[test]
fn bindgen_test_layout_TX_MUTEX_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_MUTEX_STRUCT>(),
        96usize,
        concat!("Size of: ", stringify!(TX_MUTEX_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_MUTEX_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_MUTEX_STRUCT))
    );
    fn test_field_tx_mutex_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_id)
            )
        );
    }
    test_field_tx_mutex_id();
    fn test_field_tx_mutex_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_name)
            )
        );
    }
    test_field_tx_mutex_name();
    fn test_field_tx_mutex_ownership_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_ownership_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_ownership_count)
            )
        );
    }
    test_field_tx_mutex_ownership_count();
    fn test_field_tx_mutex_owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_owner) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_owner)
            )
        );
    }
    test_field_tx_mutex_owner();
    fn test_field_tx_mutex_inherit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_inherit) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_inherit)
            )
        );
    }
    test_field_tx_mutex_inherit();
    fn test_field_tx_mutex_original_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_original_priority) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_original_priority)
            )
        );
    }
    test_field_tx_mutex_original_priority();
    fn test_field_tx_mutex_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_suspension_list) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_suspension_list)
            )
        );
    }
    test_field_tx_mutex_suspension_list();
    fn test_field_tx_mutex_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_suspended_count) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_suspended_count)
            )
        );
    }
    test_field_tx_mutex_suspended_count();
    fn test_field_tx_mutex_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_created_next) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_created_next)
            )
        );
    }
    test_field_tx_mutex_created_next();
    fn test_field_tx_mutex_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_created_previous) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_created_previous)
            )
        );
    }
    test_field_tx_mutex_created_previous();
    fn test_field_tx_mutex_highest_priority_waiting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_highest_priority_waiting) as usize
                    - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_highest_priority_waiting)
            )
        );
    }
    test_field_tx_mutex_highest_priority_waiting();
    fn test_field_tx_mutex_owned_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_owned_next) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_owned_next)
            )
        );
    }
    test_field_tx_mutex_owned_next();
    fn test_field_tx_mutex_owned_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_MUTEX_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_mutex_owned_previous) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_MUTEX_STRUCT),
                "::",
                stringify!(tx_mutex_owned_previous)
            )
        );
    }
    test_field_tx_mutex_owned_previous();
}
pub type TX_MUTEX = TX_MUTEX_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_QUEUE_STRUCT {
    pub tx_queue_id: ULONG,
    pub tx_queue_name: *mut CHAR,
    pub tx_queue_message_size: UINT,
    pub tx_queue_capacity: UINT,
    pub tx_queue_enqueued: UINT,
    pub tx_queue_available_storage: UINT,
    pub tx_queue_start: *mut ULONG,
    pub tx_queue_end: *mut ULONG,
    pub tx_queue_read: *mut ULONG,
    pub tx_queue_write: *mut ULONG,
    pub tx_queue_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_queue_suspended_count: UINT,
    pub tx_queue_created_next: *mut TX_QUEUE_STRUCT,
    pub tx_queue_created_previous: *mut TX_QUEUE_STRUCT,
    pub tx_queue_send_notify:
        ::std::option::Option<unsafe extern "C" fn(queue_ptr: *mut TX_QUEUE_STRUCT)>,
}
#[test]
fn bindgen_test_layout_TX_QUEUE_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_QUEUE_STRUCT>(),
        104usize,
        concat!("Size of: ", stringify!(TX_QUEUE_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_QUEUE_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_QUEUE_STRUCT))
    );
    fn test_field_tx_queue_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_id)
            )
        );
    }
    test_field_tx_queue_id();
    fn test_field_tx_queue_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_name)
            )
        );
    }
    test_field_tx_queue_name();
    fn test_field_tx_queue_message_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_message_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_message_size)
            )
        );
    }
    test_field_tx_queue_message_size();
    fn test_field_tx_queue_capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_capacity) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_capacity)
            )
        );
    }
    test_field_tx_queue_capacity();
    fn test_field_tx_queue_enqueued() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_enqueued) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_enqueued)
            )
        );
    }
    test_field_tx_queue_enqueued();
    fn test_field_tx_queue_available_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_available_storage) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_available_storage)
            )
        );
    }
    test_field_tx_queue_available_storage();
    fn test_field_tx_queue_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_start) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_start)
            )
        );
    }
    test_field_tx_queue_start();
    fn test_field_tx_queue_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_end) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_end)
            )
        );
    }
    test_field_tx_queue_end();
    fn test_field_tx_queue_read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_read) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_read)
            )
        );
    }
    test_field_tx_queue_read();
    fn test_field_tx_queue_write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_write) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_write)
            )
        );
    }
    test_field_tx_queue_write();
    fn test_field_tx_queue_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_suspension_list) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_suspension_list)
            )
        );
    }
    test_field_tx_queue_suspension_list();
    fn test_field_tx_queue_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_suspended_count) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_suspended_count)
            )
        );
    }
    test_field_tx_queue_suspended_count();
    fn test_field_tx_queue_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_created_next) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_created_next)
            )
        );
    }
    test_field_tx_queue_created_next();
    fn test_field_tx_queue_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_created_previous) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_created_previous)
            )
        );
    }
    test_field_tx_queue_created_previous();
    fn test_field_tx_queue_send_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_QUEUE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_send_notify) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_QUEUE_STRUCT),
                "::",
                stringify!(tx_queue_send_notify)
            )
        );
    }
    test_field_tx_queue_send_notify();
}
pub type TX_QUEUE = TX_QUEUE_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_SEMAPHORE_STRUCT {
    pub tx_semaphore_id: ULONG,
    pub tx_semaphore_name: *mut CHAR,
    pub tx_semaphore_count: ULONG,
    pub tx_semaphore_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_semaphore_suspended_count: UINT,
    pub tx_semaphore_created_next: *mut TX_SEMAPHORE_STRUCT,
    pub tx_semaphore_created_previous: *mut TX_SEMAPHORE_STRUCT,
    pub tx_semaphore_put_notify:
        ::std::option::Option<unsafe extern "C" fn(semaphore_ptr: *mut TX_SEMAPHORE_STRUCT)>,
}
#[test]
fn bindgen_test_layout_TX_SEMAPHORE_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<TX_SEMAPHORE_STRUCT>(),
        64usize,
        concat!("Size of: ", stringify!(TX_SEMAPHORE_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<TX_SEMAPHORE_STRUCT>(),
        8usize,
        concat!("Alignment of ", stringify!(TX_SEMAPHORE_STRUCT))
    );
    fn test_field_tx_semaphore_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_id)
            )
        );
    }
    test_field_tx_semaphore_id();
    fn test_field_tx_semaphore_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_name)
            )
        );
    }
    test_field_tx_semaphore_name();
    fn test_field_tx_semaphore_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_count)
            )
        );
    }
    test_field_tx_semaphore_count();
    fn test_field_tx_semaphore_suspension_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_suspension_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_suspension_list)
            )
        );
    }
    test_field_tx_semaphore_suspension_list();
    fn test_field_tx_semaphore_suspended_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_suspended_count) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_suspended_count)
            )
        );
    }
    test_field_tx_semaphore_suspended_count();
    fn test_field_tx_semaphore_created_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_created_next) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_created_next)
            )
        );
    }
    test_field_tx_semaphore_created_next();
    fn test_field_tx_semaphore_created_previous() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_created_previous) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_created_previous)
            )
        );
    }
    test_field_tx_semaphore_created_previous();
    fn test_field_tx_semaphore_put_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TX_SEMAPHORE_STRUCT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_semaphore_put_notify) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TX_SEMAPHORE_STRUCT),
                "::",
                stringify!(tx_semaphore_put_notify)
            )
        );
    }
    test_field_tx_semaphore_put_notify();
}
pub type TX_SEMAPHORE = TX_SEMAPHORE_STRUCT;
extern "C" {
    pub fn tx_application_define(first_unused_memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _tx_block_allocate(
        pool_ptr: *mut TX_BLOCK_POOL,
        block_ptr: *mut *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_create(
        pool_ptr: *mut TX_BLOCK_POOL,
        name_ptr: *mut CHAR,
        block_size: ULONG,
        pool_start: *mut ::std::os::raw::c_void,
        pool_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_delete(pool_ptr: *mut TX_BLOCK_POOL) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_info_get(
        pool_ptr: *mut TX_BLOCK_POOL,
        name: *mut *mut CHAR,
        available_blocks: *mut ULONG,
        total_blocks: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_pool: *mut *mut TX_BLOCK_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_performance_info_get(
        pool_ptr: *mut TX_BLOCK_POOL,
        allocates: *mut ULONG,
        releases: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_performance_system_info_get(
        allocates: *mut ULONG,
        releases: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_prioritize(pool_ptr: *mut TX_BLOCK_POOL) -> UINT;
}
extern "C" {
    pub fn _tx_block_release(block_ptr: *mut ::std::os::raw::c_void) -> UINT;
}
extern "C" {
    pub fn _txe_block_allocate(
        pool_ptr: *mut TX_BLOCK_POOL,
        block_ptr: *mut *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_block_pool_create(
        pool_ptr: *mut TX_BLOCK_POOL,
        name_ptr: *mut CHAR,
        block_size: ULONG,
        pool_start: *mut ::std::os::raw::c_void,
        pool_size: ULONG,
        pool_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_block_pool_delete(pool_ptr: *mut TX_BLOCK_POOL) -> UINT;
}
extern "C" {
    pub fn _txe_block_pool_info_get(
        pool_ptr: *mut TX_BLOCK_POOL,
        name: *mut *mut CHAR,
        available_blocks: *mut ULONG,
        total_blocks: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_pool: *mut *mut TX_BLOCK_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_block_pool_prioritize(pool_ptr: *mut TX_BLOCK_POOL) -> UINT;
}
extern "C" {
    pub fn _txe_block_release(block_ptr: *mut ::std::os::raw::c_void) -> UINT;
}
extern "C" {
    pub fn _tx_byte_allocate(
        pool_ptr: *mut TX_BYTE_POOL,
        memory_ptr: *mut *mut ::std::os::raw::c_void,
        memory_size: ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_create(
        pool_ptr: *mut TX_BYTE_POOL,
        name_ptr: *mut CHAR,
        pool_start: *mut ::std::os::raw::c_void,
        pool_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_delete(pool_ptr: *mut TX_BYTE_POOL) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_info_get(
        pool_ptr: *mut TX_BYTE_POOL,
        name: *mut *mut CHAR,
        available_bytes: *mut ULONG,
        fragments: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_pool: *mut *mut TX_BYTE_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_performance_info_get(
        pool_ptr: *mut TX_BYTE_POOL,
        allocates: *mut ULONG,
        releases: *mut ULONG,
        fragments_searched: *mut ULONG,
        merges: *mut ULONG,
        splits: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_performance_system_info_get(
        allocates: *mut ULONG,
        releases: *mut ULONG,
        fragments_searched: *mut ULONG,
        merges: *mut ULONG,
        splits: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_byte_pool_prioritize(pool_ptr: *mut TX_BYTE_POOL) -> UINT;
}
extern "C" {
    pub fn _tx_byte_release(memory_ptr: *mut ::std::os::raw::c_void) -> UINT;
}
extern "C" {
    pub fn _txe_byte_allocate(
        pool_ptr: *mut TX_BYTE_POOL,
        memory_ptr: *mut *mut ::std::os::raw::c_void,
        memory_size: ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_byte_pool_create(
        pool_ptr: *mut TX_BYTE_POOL,
        name_ptr: *mut CHAR,
        pool_start: *mut ::std::os::raw::c_void,
        pool_size: ULONG,
        pool_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_byte_pool_delete(pool_ptr: *mut TX_BYTE_POOL) -> UINT;
}
extern "C" {
    pub fn _txe_byte_pool_info_get(
        pool_ptr: *mut TX_BYTE_POOL,
        name: *mut *mut CHAR,
        available_bytes: *mut ULONG,
        fragments: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_pool: *mut *mut TX_BYTE_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_byte_pool_prioritize(pool_ptr: *mut TX_BYTE_POOL) -> UINT;
}
extern "C" {
    pub fn _txe_byte_release(memory_ptr: *mut ::std::os::raw::c_void) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_create(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        name_ptr: *mut CHAR,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_delete(group_ptr: *mut TX_EVENT_FLAGS_GROUP) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_get(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        requested_flags: ULONG,
        get_option: UINT,
        actual_flags_ptr: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_info_get(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        name: *mut *mut CHAR,
        current_flags: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_group: *mut *mut TX_EVENT_FLAGS_GROUP,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_performance_info_get(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        sets: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_performance_system_info_get(
        sets: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_set(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        flags_to_set: ULONG,
        set_option: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_event_flags_set_notify(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        events_set_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_group_ptr: *mut TX_EVENT_FLAGS_GROUP),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_create(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        name_ptr: *mut CHAR,
        event_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_delete(group_ptr: *mut TX_EVENT_FLAGS_GROUP) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_get(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        requested_flags: ULONG,
        get_option: UINT,
        actual_flags_ptr: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_info_get(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        name: *mut *mut CHAR,
        current_flags: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_group: *mut *mut TX_EVENT_FLAGS_GROUP,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_set(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        flags_to_set: ULONG,
        set_option: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_event_flags_set_notify(
        group_ptr: *mut TX_EVENT_FLAGS_GROUP,
        events_set_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_group_ptr: *mut TX_EVENT_FLAGS_GROUP),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_initialize_kernel_enter();
}
extern "C" {
    pub fn _tx_mutex_create(mutex_ptr: *mut TX_MUTEX, name_ptr: *mut CHAR, inherit: UINT) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_delete(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_get(mutex_ptr: *mut TX_MUTEX, wait_option: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_info_get(
        mutex_ptr: *mut TX_MUTEX,
        name: *mut *mut CHAR,
        count: *mut ULONG,
        owner: *mut *mut TX_THREAD,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_mutex: *mut *mut TX_MUTEX,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_performance_info_get(
        mutex_ptr: *mut TX_MUTEX,
        puts: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
        inversions: *mut ULONG,
        inheritances: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_performance_system_info_get(
        puts: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
        inversions: *mut ULONG,
        inheritances: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_prioritize(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _tx_mutex_put(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_create(
        mutex_ptr: *mut TX_MUTEX,
        name_ptr: *mut CHAR,
        inherit: UINT,
        mutex_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_delete(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_get(mutex_ptr: *mut TX_MUTEX, wait_option: ULONG) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_info_get(
        mutex_ptr: *mut TX_MUTEX,
        name: *mut *mut CHAR,
        count: *mut ULONG,
        owner: *mut *mut TX_THREAD,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_mutex: *mut *mut TX_MUTEX,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_prioritize(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _txe_mutex_put(mutex_ptr: *mut TX_MUTEX) -> UINT;
}
extern "C" {
    pub fn _tx_queue_create(
        queue_ptr: *mut TX_QUEUE,
        name_ptr: *mut CHAR,
        message_size: UINT,
        queue_start: *mut ::std::os::raw::c_void,
        queue_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_delete(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _tx_queue_flush(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _tx_queue_info_get(
        queue_ptr: *mut TX_QUEUE,
        name: *mut *mut CHAR,
        enqueued: *mut ULONG,
        available_storage: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_queue: *mut *mut TX_QUEUE,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_performance_info_get(
        queue_ptr: *mut TX_QUEUE,
        messages_sent: *mut ULONG,
        messages_received: *mut ULONG,
        empty_suspensions: *mut ULONG,
        full_suspensions: *mut ULONG,
        full_errors: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_performance_system_info_get(
        messages_sent: *mut ULONG,
        messages_received: *mut ULONG,
        empty_suspensions: *mut ULONG,
        full_suspensions: *mut ULONG,
        full_errors: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_prioritize(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _tx_queue_receive(
        queue_ptr: *mut TX_QUEUE,
        destination_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_send(
        queue_ptr: *mut TX_QUEUE,
        source_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_send_notify(
        queue_ptr: *mut TX_QUEUE,
        queue_send_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_queue_ptr: *mut TX_QUEUE),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_queue_front_send(
        queue_ptr: *mut TX_QUEUE,
        source_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_create(
        queue_ptr: *mut TX_QUEUE,
        name_ptr: *mut CHAR,
        message_size: UINT,
        queue_start: *mut ::std::os::raw::c_void,
        queue_size: ULONG,
        queue_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_delete(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _txe_queue_flush(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _txe_queue_info_get(
        queue_ptr: *mut TX_QUEUE,
        name: *mut *mut CHAR,
        enqueued: *mut ULONG,
        available_storage: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_queue: *mut *mut TX_QUEUE,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_prioritize(queue_ptr: *mut TX_QUEUE) -> UINT;
}
extern "C" {
    pub fn _txe_queue_receive(
        queue_ptr: *mut TX_QUEUE,
        destination_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_send(
        queue_ptr: *mut TX_QUEUE,
        source_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_send_notify(
        queue_ptr: *mut TX_QUEUE,
        queue_send_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_queue_ptr: *mut TX_QUEUE),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_queue_front_send(
        queue_ptr: *mut TX_QUEUE,
        source_ptr: *mut ::std::os::raw::c_void,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_ceiling_put(semaphore_ptr: *mut TX_SEMAPHORE, ceiling: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_create(
        semaphore_ptr: *mut TX_SEMAPHORE,
        name_ptr: *mut CHAR,
        initial_count: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_delete(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_get(semaphore_ptr: *mut TX_SEMAPHORE, wait_option: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_info_get(
        semaphore_ptr: *mut TX_SEMAPHORE,
        name: *mut *mut CHAR,
        current_value: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_semaphore: *mut *mut TX_SEMAPHORE,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_performance_info_get(
        semaphore_ptr: *mut TX_SEMAPHORE,
        puts: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_performance_system_info_get(
        puts: *mut ULONG,
        gets: *mut ULONG,
        suspensions: *mut ULONG,
        timeouts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_prioritize(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_put(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _tx_semaphore_put_notify(
        semaphore_ptr: *mut TX_SEMAPHORE,
        semaphore_put_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_semaphore_ptr: *mut TX_SEMAPHORE),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_ceiling_put(semaphore_ptr: *mut TX_SEMAPHORE, ceiling: ULONG) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_create(
        semaphore_ptr: *mut TX_SEMAPHORE,
        name_ptr: *mut CHAR,
        initial_count: ULONG,
        semaphore_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_delete(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_get(semaphore_ptr: *mut TX_SEMAPHORE, wait_option: ULONG) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_info_get(
        semaphore_ptr: *mut TX_SEMAPHORE,
        name: *mut *mut CHAR,
        current_value: *mut ULONG,
        first_suspended: *mut *mut TX_THREAD,
        suspended_count: *mut ULONG,
        next_semaphore: *mut *mut TX_SEMAPHORE,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_prioritize(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_put(semaphore_ptr: *mut TX_SEMAPHORE) -> UINT;
}
extern "C" {
    pub fn _txe_semaphore_put_notify(
        semaphore_ptr: *mut TX_SEMAPHORE,
        semaphore_put_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_semaphore_ptr: *mut TX_SEMAPHORE),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_context_save();
}
extern "C" {
    pub fn _tx_thread_context_restore();
}
extern "C" {
    pub fn _tx_thread_create(
        thread_ptr: *mut TX_THREAD,
        name_ptr: *mut CHAR,
        entry_function: ::std::option::Option<unsafe extern "C" fn(entry_input: ULONG)>,
        entry_input: ULONG,
        stack_start: *mut ::std::os::raw::c_void,
        stack_size: ULONG,
        priority: UINT,
        preempt_threshold: UINT,
        time_slice: ULONG,
        auto_start: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_delete(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_thread_entry_exit_notify(
        thread_ptr: *mut TX_THREAD,
        thread_entry_exit_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_thread_ptr: *mut TX_THREAD, type_: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_identify() -> *mut TX_THREAD;
}
extern "C" {
    pub fn _tx_thread_info_get(
        thread_ptr: *mut TX_THREAD,
        name: *mut *mut CHAR,
        state: *mut UINT,
        run_count: *mut ULONG,
        priority: *mut UINT,
        preemption_threshold: *mut UINT,
        time_slice: *mut ULONG,
        next_thread: *mut *mut TX_THREAD,
        next_suspended_thread: *mut *mut TX_THREAD,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_interrupt_control(new_posture: UINT) -> UINT;
}
extern "C" {
    pub fn _tx_thread_performance_info_get(
        thread_ptr: *mut TX_THREAD,
        resumptions: *mut ULONG,
        suspensions: *mut ULONG,
        solicited_preemptions: *mut ULONG,
        interrupt_preemptions: *mut ULONG,
        priority_inversions: *mut ULONG,
        time_slices: *mut ULONG,
        relinquishes: *mut ULONG,
        timeouts: *mut ULONG,
        wait_aborts: *mut ULONG,
        last_preempted_by: *mut *mut TX_THREAD,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_performance_system_info_get(
        resumptions: *mut ULONG,
        suspensions: *mut ULONG,
        solicited_preemptions: *mut ULONG,
        interrupt_preemptions: *mut ULONG,
        priority_inversions: *mut ULONG,
        time_slices: *mut ULONG,
        relinquishes: *mut ULONG,
        timeouts: *mut ULONG,
        wait_aborts: *mut ULONG,
        non_idle_returns: *mut ULONG,
        idle_returns: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_preemption_change(
        thread_ptr: *mut TX_THREAD,
        new_threshold: UINT,
        old_threshold: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_priority_change(
        thread_ptr: *mut TX_THREAD,
        new_priority: UINT,
        old_priority: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_relinquish();
}
extern "C" {
    pub fn _tx_thread_reset(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_thread_resume(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_thread_sleep(timer_ticks: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_thread_stack_error_notify(
        stack_error_handler: ::std::option::Option<
            unsafe extern "C" fn(thread_ptr: *mut TX_THREAD),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_suspend(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_thread_terminate(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_thread_time_slice_change(
        thread_ptr: *mut TX_THREAD,
        new_time_slice: ULONG,
        old_time_slice: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_thread_wait_abort(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_create(
        thread_ptr: *mut TX_THREAD,
        name_ptr: *mut CHAR,
        entry_function: ::std::option::Option<unsafe extern "C" fn(entry_input: ULONG)>,
        entry_input: ULONG,
        stack_start: *mut ::std::os::raw::c_void,
        stack_size: ULONG,
        priority: UINT,
        preempt_threshold: UINT,
        time_slice: ULONG,
        auto_start: UINT,
        thread_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_delete(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_entry_exit_notify(
        thread_ptr: *mut TX_THREAD,
        thread_entry_exit_notify: ::std::option::Option<
            unsafe extern "C" fn(notify_thread_ptr: *mut TX_THREAD, type_: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_info_get(
        thread_ptr: *mut TX_THREAD,
        name: *mut *mut CHAR,
        state: *mut UINT,
        run_count: *mut ULONG,
        priority: *mut UINT,
        preemption_threshold: *mut UINT,
        time_slice: *mut ULONG,
        next_thread: *mut *mut TX_THREAD,
        next_suspended_thread: *mut *mut TX_THREAD,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_preemption_change(
        thread_ptr: *mut TX_THREAD,
        new_threshold: UINT,
        old_threshold: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_priority_change(
        thread_ptr: *mut TX_THREAD,
        new_priority: UINT,
        old_priority: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_relinquish();
}
extern "C" {
    pub fn _txe_thread_reset(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_resume(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_suspend(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_terminate(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _txe_thread_time_slice_change(
        thread_ptr: *mut TX_THREAD,
        new_time_slice: ULONG,
        old_time_slice: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_thread_wait_abort(thread_ptr: *mut TX_THREAD) -> UINT;
}
extern "C" {
    pub fn _tx_timer_activate(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _tx_timer_change(
        timer_ptr: *mut TX_TIMER,
        initial_ticks: ULONG,
        reschedule_ticks: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_timer_create(
        timer_ptr: *mut TX_TIMER,
        name_ptr: *mut CHAR,
        expiration_function: ::std::option::Option<unsafe extern "C" fn(input: ULONG)>,
        expiration_input: ULONG,
        initial_ticks: ULONG,
        reschedule_ticks: ULONG,
        auto_activate: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_timer_deactivate(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _tx_timer_delete(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _tx_timer_info_get(
        timer_ptr: *mut TX_TIMER,
        name: *mut *mut CHAR,
        active: *mut UINT,
        remaining_ticks: *mut ULONG,
        reschedule_ticks: *mut ULONG,
        next_timer: *mut *mut TX_TIMER,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_timer_performance_info_get(
        timer_ptr: *mut TX_TIMER,
        activates: *mut ULONG,
        reactivates: *mut ULONG,
        deactivates: *mut ULONG,
        expirations: *mut ULONG,
        expiration_adjusts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_timer_performance_system_info_get(
        activates: *mut ULONG,
        reactivates: *mut ULONG,
        deactivates: *mut ULONG,
        expirations: *mut ULONG,
        expiration_adjusts: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_time_get() -> ULONG;
}
extern "C" {
    pub fn _tx_time_set(new_time: ULONG);
}
extern "C" {
    pub fn _txe_timer_activate(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _txe_timer_change(
        timer_ptr: *mut TX_TIMER,
        initial_ticks: ULONG,
        reschedule_ticks: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_timer_create(
        timer_ptr: *mut TX_TIMER,
        name_ptr: *mut CHAR,
        expiration_function: ::std::option::Option<unsafe extern "C" fn(input: ULONG)>,
        expiration_input: ULONG,
        initial_ticks: ULONG,
        reschedule_ticks: ULONG,
        auto_activate: UINT,
        timer_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _txe_timer_deactivate(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _txe_timer_delete(timer_ptr: *mut TX_TIMER) -> UINT;
}
extern "C" {
    pub fn _txe_timer_info_get(
        timer_ptr: *mut TX_TIMER,
        name: *mut *mut CHAR,
        active: *mut UINT,
        remaining_ticks: *mut ULONG,
        reschedule_ticks: *mut ULONG,
        next_timer: *mut *mut TX_TIMER,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_trace_enable(
        trace_buffer_start: *mut ::std::os::raw::c_void,
        trace_buffer_size: ULONG,
        registry_entries: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_trace_event_filter(event_filter_bits: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_trace_event_unfilter(event_unfilter_bits: ULONG) -> UINT;
}
extern "C" {
    pub fn _tx_trace_disable() -> UINT;
}
extern "C" {
    pub fn _tx_trace_isr_enter_insert(isr_id: ULONG);
}
extern "C" {
    pub fn _tx_trace_isr_exit_insert(isr_id: ULONG);
}
extern "C" {
    pub fn _tx_trace_buffer_full_notify(
        full_buffer_callback: ::std::option::Option<
            unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_void),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_trace_user_event_insert(
        event_id: ULONG,
        info_field_1: ULONG,
        info_field_2: ULONG,
        info_field_3: ULONG,
        info_field_4: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _tx_trace_interrupt_control(new_posture: UINT) -> UINT;
}
extern "C" {
    pub fn _tx_block_pool_initialize();
}
extern "C" {
    pub fn _tx_block_pool_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub static mut _tx_block_pool_created_ptr: *mut TX_BLOCK_POOL;
}
extern "C" {
    pub static mut _tx_block_pool_created_count: ULONG;
}
extern "C" {
    pub fn _tx_byte_pool_initialize();
}
extern "C" {
    pub fn _tx_byte_pool_search(pool_ptr: *mut TX_BYTE_POOL, memory_size: ULONG) -> *mut UCHAR;
}
extern "C" {
    pub fn _tx_byte_pool_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub static mut _tx_byte_pool_created_ptr: *mut TX_BYTE_POOL;
}
extern "C" {
    pub static mut _tx_byte_pool_created_count: ULONG;
}
extern "C" {
    pub fn _tx_event_flags_initialize();
}
extern "C" {
    pub fn _tx_event_flags_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub static mut _tx_event_flags_created_ptr: *mut TX_EVENT_FLAGS_GROUP;
}
extern "C" {
    pub static mut _tx_event_flags_created_count: ULONG;
}
extern "C" {
    pub fn _tx_initialize_high_level();
}
extern "C" {
    pub fn _tx_initialize_kernel_setup();
}
extern "C" {
    pub fn _tx_initialize_low_level();
}
extern "C" {
    pub static mut _tx_initialize_unused_memory: *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _tx_mutex_initialize();
}
extern "C" {
    pub fn _tx_mutex_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub fn _tx_mutex_thread_release(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_mutex_priority_change(thread_ptr: *mut TX_THREAD, new_priority: UINT);
}
extern "C" {
    pub static mut _tx_mutex_created_ptr: *mut TX_MUTEX;
}
extern "C" {
    pub static mut _tx_mutex_created_count: ULONG;
}
extern "C" {
    pub fn _tx_queue_initialize();
}
extern "C" {
    pub fn _tx_queue_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub static mut _tx_queue_created_ptr: *mut TX_QUEUE;
}
extern "C" {
    pub static mut _tx_queue_created_count: ULONG;
}
extern "C" {
    pub fn _tx_semaphore_initialize();
}
extern "C" {
    pub fn _tx_semaphore_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub static mut _tx_semaphore_created_ptr: *mut TX_SEMAPHORE;
}
extern "C" {
    pub static mut _tx_semaphore_created_count: ULONG;
}
extern "C" {
    pub fn _tx_thread_initialize();
}
extern "C" {
    pub fn _tx_thread_schedule();
}
extern "C" {
    pub fn _tx_thread_shell_entry();
}
extern "C" {
    pub fn _tx_thread_stack_analyze(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_stack_build(
        thread_ptr: *mut TX_THREAD,
        function_ptr: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn _tx_thread_stack_error(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_stack_error_handler(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_system_preempt_check();
}
extern "C" {
    pub fn _tx_thread_system_resume(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_system_ni_resume(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_system_return();
}
extern "C" {
    pub fn _tx_thread_system_suspend(thread_ptr: *mut TX_THREAD);
}
extern "C" {
    pub fn _tx_thread_system_ni_suspend(thread_ptr: *mut TX_THREAD, wait_option: ULONG);
}
extern "C" {
    pub fn _tx_thread_time_slice();
}
extern "C" {
    pub fn _tx_thread_timeout(timeout_input: ULONG);
}
extern "C" {
    pub static mut _tx_thread_system_stack_ptr: *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut _tx_thread_current_ptr: *mut TX_THREAD;
}
extern "C" {
    pub static mut _tx_thread_execute_ptr: *mut TX_THREAD;
}
extern "C" {
    pub static mut _tx_thread_created_ptr: *mut TX_THREAD;
}
extern "C" {
    pub static mut _tx_thread_created_count: ULONG;
}
extern "C" {
    pub static mut _tx_thread_system_state: ULONG;
}
extern "C" {
    pub static mut _tx_thread_priority_maps: [ULONG; 1usize];
}
extern "C" {
    pub static mut _tx_thread_preempted_maps: [ULONG; 1usize];
}
extern "C" {
    pub static mut _tx_thread_highest_priority: UINT;
}
extern "C" {
    pub static mut _tx_thread_priority_list: [*mut TX_THREAD; 32usize];
}
extern "C" {
    pub static mut _tx_thread_preempt_disable: UINT;
}
extern "C" {
    pub static mut _tx_thread_mutex_release:
        ::std::option::Option<unsafe extern "C" fn(thread_ptr: *mut TX_THREAD)>;
}
extern "C" {
    pub static mut _tx_build_options: ULONG;
}
extern "C" {
    pub fn _tx_timer_expiration_process();
}
extern "C" {
    pub fn _tx_timer_initialize();
}
extern "C" {
    pub fn _tx_timer_system_activate(timer_ptr: *mut TX_TIMER_INTERNAL);
}
extern "C" {
    pub fn _tx_timer_system_deactivate(timer_ptr: *mut TX_TIMER_INTERNAL);
}
extern "C" {
    pub fn _tx_timer_thread_entry(timer_thread_input: ULONG);
}
extern "C" {
    pub static mut _tx_timer_system_clock: ULONG;
}
extern "C" {
    pub static mut _tx_timer_time_slice: ULONG;
}
extern "C" {
    pub static mut _tx_timer_expired_time_slice: UINT;
}
extern "C" {
    pub static mut _tx_timer_list: [*mut TX_TIMER_INTERNAL; 32usize];
}
extern "C" {
    pub static mut _tx_timer_list_start: *mut *mut TX_TIMER_INTERNAL;
}
extern "C" {
    pub static mut _tx_timer_list_end: *mut *mut TX_TIMER_INTERNAL;
}
extern "C" {
    pub static mut _tx_timer_current_ptr: *mut *mut TX_TIMER_INTERNAL;
}
extern "C" {
    pub static mut _tx_timer_expired: UINT;
}
extern "C" {
    pub static mut _tx_timer_created_ptr: *mut TX_TIMER;
}
extern "C" {
    pub static mut _tx_timer_created_count: ULONG;
}
extern "C" {
    pub static mut _tx_timer_expired_timer_ptr: *mut TX_TIMER_INTERNAL;
}
extern "C" {
    pub static mut _tx_timer_thread: TX_THREAD;
}
extern "C" {
    pub static mut _tx_timer_stack_start: *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut _tx_timer_stack_size: ULONG;
}
extern "C" {
    pub static mut _tx_timer_priority: UINT;
}
extern "C" {
    pub static mut _tx_timer_thread_stack_area: [ULONG; 256usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
